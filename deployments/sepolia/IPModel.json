{
  "address": "0xC27c894F4661A0FE5fF36341F298d33cd4876B44",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        }
      ],
      "name": "GroupCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "MinterAuthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedMinters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "payToken",
          "type": "address"
        }
      ],
      "name": "createGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGroupCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        }
      ],
      "name": "getGroupInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentSupply",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "payToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "groupIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "setAuthorizedMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "setGroupActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "payToken",
          "type": "address"
        }
      ],
      "name": "setGroupPriceAndToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenGroups",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentSupply",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "payToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfefed9ddc9752747064334cb2e02494b74b215aa52db6815d83141e877b0e4b7",
  "receipt": {
    "to": null,
    "from": "0xdD7Ad47da281b5aDBa6Dbd865E8488F3F01900E9",
    "contractAddress": "0xC27c894F4661A0FE5fF36341F298d33cd4876B44",
    "transactionIndex": 137,
    "gasUsed": "2314065",
    "logsBloom": "0x
    "blockHash": "0x3b74af2f3934279f0e050bd5a07a8e275daef0ce96c838f9c5e2cd28884eab93",
    "transactionHash": "0xfefed9ddc9752747064334cb2e02494b74b215aa52db6815d83141e877b0e4b7",
    "logs": [
      {
        "transactionIndex": 137,
        "blockNumber": 8726182,
        "transactionHash": "0xfefed9ddc9752747064334cb2e02494b74b215aa52db6815d83141e877b0e4b7",
        "address": "0xC27c894F4661A0FE5fF36341F298d33cd4876B44",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dd7ad47da281b5adba6dbd865e8488f3f01900e9"
        ],
        "data": "0x",
        "logIndex": 238,
        "blockHash": "0x3b74af2f3934279f0e050bd5a07a8e275daef0ce96c838f9c5e2cd28884eab93"
      },
      {
        "transactionIndex": 137,
        "blockNumber": 8726182,
        "transactionHash": "0xfefed9ddc9752747064334cb2e02494b74b215aa52db6815d83141e877b0e4b7",
        "address": "0xC27c894F4661A0FE5fF36341F298d33cd4876B44",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dd7ad47da281b5adba6dbd865e8488f3f01900e9",
          "0x000000000000000000000000dd7ad47da281b5adba6dbd865e8488f3f01900e9"
        ],
        "data": "0x",
        "logIndex": 239,
        "blockHash": "0x3b74af2f3934279f0e050bd5a07a8e275daef0ce96c838f9c5e2cd28884eab93"
      }
    ],
    "blockNumber": 8726182,
    "cumulativeGasUsed": "24260550",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4197f5e5a4afb3c5e560e64ba14adaac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"GroupCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"MinterAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedMinters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"}],\"name\":\"createGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGroupCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"}],\"name\":\"getGroupInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSupply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"setAuthorizedMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setGroupActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"}],\"name\":\"setGroupPriceAndToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenGroups\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSupply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IPModel.sol\":\"IPModel\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IPModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract IPModel is ERC1155, Ownable {\\n    using Strings for uint256;\\n\\n    // \\u4ee3\\u5e01\\u8ba1\\u6570\\u5668\\n    uint256 private _nextTokenId;\\n\\n    // \\u6240\\u6709\\u7ec4\\u7684ID\\u5217\\u8868\\n    uint256[] public groupIds;\\n\\n    // \\u57fa\\u7840URI\\n    string public baseURI;\\n\\n    // \\u4ee3\\u5e01\\u7ec4\\u4fe1\\u606f\\n    struct TokenGroup {\\n        uint256 id; // \\u7ec4ID\\n        string name; // \\u7ec4\\u540d\\n        string description; // \\u7ec4\\u63cf\\u8ff0\\n        uint256 maxSupply; // \\u6700\\u5927\\u4f9b\\u5e94\\u91cf (0\\u8868\\u793a\\u65e0\\u9650)\\n        uint256 currentSupply; // \\u5f53\\u524d\\u4f9b\\u5e94\\u91cf\\n        bool isActive; // \\u662f\\u5426\\u6fc0\\u6d3b\\n        uint256 price; // \\u5355\\u4ef7\\uff08ERC20\\u6700\\u5c0f\\u5355\\u4f4d\\uff09\\n        address payToken; // \\u652f\\u4ed8\\u5e01\\u79cd\\uff08ERC20\\u5730\\u5740\\uff09\\n    }\\n\\n    // \\u4ee3\\u5e01ID\\u5230\\u7ec4\\u7684\\u6620\\u5c04\\n    mapping(uint256 => TokenGroup) public tokenGroups;\\n\\n    // \\u6388\\u6743\\u5730\\u5740\\u6620\\u5c04\\n    mapping(address => bool) public authorizedMinters;\\n\\n    // \\u4e8b\\u4ef6\\n    event GroupCreated(uint256 indexed groupId, string name, uint256 maxSupply);\\n    event TokensMinted(uint256 indexed groupId, address indexed to, uint256 amount);\\n    event MinterAuthorized(address indexed minter, bool authorized);\\n\\n    constructor() ERC1155(\\\"IPModel\\\") {\\n        _nextTokenId = 1;\\n        baseURI = \\\"\\\";\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    // \\u8bbe\\u7f6e\\u57fa\\u7840URI\\n    function setBaseURI(string memory _baseURI) external onlyOwner {\\n        baseURI = _baseURI;\\n    }\\n\\n    // \\u521b\\u5efa\\u65b0\\u7684\\u4ee3\\u5e01\\u7ec4\\n    function createGroup(string memory name, string memory description, uint256 maxSupply, uint256 price, address payToken) external onlyOwner returns (uint256) {\\n        uint256 groupId = _nextTokenId;\\n        _nextTokenId++;\\n\\n        tokenGroups[groupId] = TokenGroup({ id: groupId, name: name, description: description, maxSupply: maxSupply, currentSupply: 0, isActive: true, price: price, payToken: payToken });\\n\\n        groupIds.push(groupId);\\n\\n        emit GroupCreated(groupId, name, maxSupply);\\n        return groupId;\\n    }\\n\\n    // \\u8bbe\\u7f6e\\u7ec4\\u72b6\\u6001\\n    function setGroupActive(uint256 groupId, bool active) external onlyOwner {\\n        require(tokenGroups[groupId].maxSupply > 0 || tokenGroups[groupId].currentSupply > 0, \\\"IPModel: Group does not exist\\\");\\n        tokenGroups[groupId].isActive = active;\\n    }\\n\\n    // \\u8bbe\\u7f6e\\u7ec4\\u4ef7\\u683c\\u548c\\u652f\\u4ed8\\u5e01\\u79cd\\n    function setGroupPriceAndToken(uint256 groupId, uint256 price, address payToken) external onlyOwner {\\n        require(tokenGroups[groupId].id != 0, \\\"Group not exist\\\");\\n        tokenGroups[groupId].price = price;\\n        tokenGroups[groupId].payToken = payToken;\\n    }\\n\\n    // \\u94f8\\u9020\\u4ee3\\u5e01\\u5230\\u6307\\u5b9a\\u7ec4\\n    function mint(address to, uint256 groupId, uint256 amount) external onlyAuthorizedMinter {\\n        require(tokenGroups[groupId].isActive, \\\"IPModel: Group is not active\\\");\\n        require(amount > 0, \\\"IPModel: Amount must be greater than 0\\\");\\n\\n        // \\u68c0\\u67e5\\u6700\\u5927\\u4f9b\\u5e94\\u91cf\\u9650\\u5236\\n        if (tokenGroups[groupId].maxSupply > 0) {\\n            require(tokenGroups[groupId].currentSupply + amount <= tokenGroups[groupId].maxSupply, \\\"IPModel: Exceeds maximum supply\\\");\\n        }\\n\\n        tokenGroups[groupId].currentSupply += amount;\\n        _mint(to, groupId, amount, \\\"\\\");\\n\\n        emit TokensMinted(groupId, to, amount);\\n    }\\n\\n    // \\u83b7\\u53d6\\u4ee3\\u5e01URI (ERC1155\\u6807\\u51c6)\\n    function uri(uint256 _tokenId) public view virtual override returns (string memory) {\\n        require(tokenGroups[_tokenId].isActive || tokenGroups[_tokenId].currentSupply > 0, \\\"IPModel: Token group does not exist\\\");\\n\\n        if (bytes(baseURI).length == 0) {\\n            return \\\"\\\";\\n        }\\n        uint256 groupId = tokenGroups[_tokenId].id;\\n\\n        return string(abi.encodePacked(baseURI, \\\"/\\\", Strings.toString(groupId), \\\"/\\\", Strings.toString(_tokenId)));\\n    }\\n\\n    // \\u83b7\\u53d6\\u6240\\u6709\\u7ec4\\u7684\\u6570\\u91cf\\n    function getGroupCount() external view returns (uint256) {\\n        return groupIds.length;\\n    }\\n\\n    // \\u83b7\\u53d6\\u7ec4\\u4fe1\\u606f\\n    function getGroupInfo(\\n        uint256 groupId\\n    ) external view returns (string memory name, string memory description, uint256 maxSupply, uint256 currentSupply, bool isActive, uint256 price, address payToken) {\\n        TokenGroup memory group = tokenGroups[groupId];\\n        return (group.name, group.description, group.maxSupply, group.currentSupply, group.isActive, group.price, group.payToken);\\n    }\\n\\n    // \\u6388\\u6743/\\u53d6\\u6d88\\u6388\\u6743\\u94f8\\u9020\\u8005\\n    function setAuthorizedMinter(address minter, bool authorized) external onlyOwner {\\n        require(minter != address(0), \\\"IPModel: Invalid minter address\\\");\\n        authorizedMinters[minter] = authorized;\\n        emit MinterAuthorized(minter, authorized);\\n    }\\n\\n    // \\u68c0\\u67e5\\u662f\\u5426\\u652f\\u6301\\u67d0\\u4e2a\\u63a5\\u53e3\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    // \\u4fee\\u9970\\u7b26\\uff1a\\u68c0\\u67e5\\u662f\\u5426\\u4e3a\\u6388\\u6743\\u7684\\u94f8\\u9020\\u8005\\n    modifier onlyAuthorizedMinter() {\\n        require(owner() == msg.sender || authorizedMinters[msg.sender], \\\"IPModel: Not authorized to mint\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x7ef36374a74c3742937c7453245f9738a30a99486529b2ce3c7c1ba8f5de664f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040805180820190915260078152661254135bd9195b60ca1b60208201526200003b816200007c565b5062000047336200008e565b60016004556040805160208101909152600081526006906200006a908262000187565b5062000076336200008e565b62000253565b60026200008a828262000187565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200010b57607f821691505b6020821081036200012c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000182576000816000526020600020601f850160051c810160208610156200015d5750805b601f850160051c820191505b818110156200017e5782815560010162000169565b5050505b505050565b81516001600160401b03811115620001a357620001a3620000e0565b620001bb81620001b48454620000f6565b8462000132565b602080601f831160018114620001f35760008415620001da5750858301515b600019600386901b1c1916600185901b1785556200017e565b600085815260208120601f198616915b82811015620002245788860151825594840194600190910190840162000203565b5085821015620002435787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61276780620002636000396000f3fe608060405234801561001057600080fd5b506004361061014c5760003560e01c8063715018a6116100c3578063aa2fe91b1161007c578063aa2fe91b146102e1578063e985e9c514610304578063e9afbcaa14610340578063ed58bad814610353578063f242432a14610366578063f2fde38b1461037957600080fd5b8063715018a61461024b57806388aea1ba146102535780638da5cb5b1461027a57806394d6882c1461029557806399d4360f146102a8578063a22cb465146102ce57600080fd5b8063156e29f611610115578063156e29f6146101d55780632eb2c2d6146101ea5780634093d7a1146101fd5780634e1273f41461021057806355f804b3146102305780636c0360eb1461024357600080fd5b8062fdd58e1461015157806301ffc9a714610177578063023daf3f1461019a57806306545a93146101ad5780630e89341c146101b5575b600080fd5b61016461015f366004611abc565b61038c565b6040519081526020015b60405180910390f35b61018a610185366004611afc565b610425565b604051901515815260200161016e565b6101646101a8366004611bd7565b610430565b600554610164565b6101c86101c3366004611c5f565b6105ae565b60405161016e9190611cc8565b6101e86101e3366004611cdb565b6106af565b005b6101e86101f8366004611da8565b610907565b61016461020b366004611c5f565b610953565b61022361021e366004611e52565b610974565b60405161016e9190611f59565b6101e861023e366004611f6c565b610a96565b6101c8610aae565b6101e8610b3c565b610266610261366004611c5f565b610b50565b60405161016e989796959493929190611fa1565b6003546040516001600160a01b03909116815260200161016e565b6101e86102a3366004612004565b610cae565b6102bb6102b6366004611c5f565b610d3f565b60405161016e9796959493929190612039565b6101e86102dc3660046120a2565b610f22565b61018a6102ef3660046120d5565b60086020526000908152604090205460ff1681565b61018a6103123660046120f0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101e861034e36600461211a565b610f2d565b6101e86103613660046120a2565b610fd3565b6101e861037436600461213d565b611090565b6101e86103873660046120d5565b6110d5565b60006001600160a01b0383166103fc5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b600061041f8261114e565b600061043a61119e565b60048054908190600061044c836121b8565b9091555050604080516101008101825282815260208082018a81528284018a905260608301899052600060808401819052600160a0850181905260c085018a90526001600160a01b03891660e0860152868252600790935293909320825181559251919291908201906104bf9082612258565b50604082015160028201906104d49082612258565b50606082015160038201556080820151600482015560a08201516005808301805460ff19169215159290921790915560c0830151600683015560e090920151600790910180546001600160a01b0319166001600160a01b0390921691909117905580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00181905560405181907fad96ee039a6b79065f1253caad335f597fa804a70b4761bf46f0554eec68c1c79061059c908a908990612318565b60405180910390a29695505050505050565b60008181526007602052604090206005015460609060ff16806105e1575060008281526007602052604090206004015415155b6106395760405162461bcd60e51b815260206004820152602360248201527f49504d6f64656c3a20546f6b656e2067726f757020646f6573206e6f742065786044820152621a5cdd60ea1b60648201526084016103f3565b60068054610646906121d1565b905060000361066357505060408051602081019091526000815290565b600082815260076020526040902054600661067d826111f8565b610686856111f8565b60405160200161069893929190612356565b604051602081830303815290604052915050919050565b336106c26003546001600160a01b031690565b6001600160a01b031614806106e657503360009081526008602052604090205460ff165b6107325760405162461bcd60e51b815260206004820152601f60248201527f49504d6f64656c3a204e6f7420617574686f72697a656420746f206d696e740060448201526064016103f3565b60008281526007602052604090206005015460ff166107935760405162461bcd60e51b815260206004820152601c60248201527f49504d6f64656c3a2047726f7570206973206e6f74206163746976650000000060448201526064016103f3565b600081116107f25760405162461bcd60e51b815260206004820152602660248201527f49504d6f64656c3a20416d6f756e74206d75737420626520677265617465722060448201526507468616e20360d41b60648201526084016103f3565b6000828152600760205260409020600301541561087b576000828152600760205260409020600381015460049091015461082d908390612408565b111561087b5760405162461bcd60e51b815260206004820152601f60248201527f49504d6f64656c3a2045786365656473206d6178696d756d20737570706c790060448201526064016103f3565b6000828152600760205260408120600401805483929061089c908490612408565b925050819055506108be83838360405180602001604052806000815250611301565b826001600160a01b0316827f5c8e94c72da12a6d6a1213edafd788896df5fd2d6527a9adeb11f8e5d0be1c4c836040516108fa91815260200190565b60405180910390a3505050565b6001600160a01b03851633148061092357506109238533610312565b61093f5760405162461bcd60e51b81526004016103f39061241b565b61094c8585858585611415565b5050505050565b6005818154811061096357600080fd5b600091825260209091200154905081565b606081518351146109d95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016103f3565b6000835167ffffffffffffffff8111156109f5576109f5611b20565b604051908082528060200260200182016040528015610a1e578160200160208202803683370190505b50905060005b8451811015610a8e57610a69858281518110610a4257610a4261246a565b6020026020010151858381518110610a5c57610a5c61246a565b602002602001015161038c565b828281518110610a7b57610a7b61246a565b6020908102919091010152600101610a24565b509392505050565b610a9e61119e565b6006610aaa8282612258565b5050565b60068054610abb906121d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae7906121d1565b8015610b345780601f10610b0957610100808354040283529160200191610b34565b820191906000526020600020905b815481529060010190602001808311610b1757829003601f168201915b505050505081565b610b4461119e565b610b4e60006115eb565b565b60076020526000908152604090208054600182018054919291610b72906121d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9e906121d1565b8015610beb5780601f10610bc057610100808354040283529160200191610beb565b820191906000526020600020905b815481529060010190602001808311610bce57829003601f168201915b505050505090806002018054610c00906121d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2c906121d1565b8015610c795780601f10610c4e57610100808354040283529160200191610c79565b820191906000526020600020905b815481529060010190602001808311610c5c57829003601f168201915b50505060038401546004850154600586015460068701546007909701549596929591945060ff1692506001600160a01b031688565b610cb661119e565b6000838152600760205260408120549003610d055760405162461bcd60e51b815260206004820152600f60248201526e11dc9bdd5c081b9bdd08195e1a5cdd608a1b60448201526064016103f3565b60009283526007602081905260409093206006810192909255910180546001600160a01b0319166001600160a01b03909216919091179055565b606080600080600080600080600760008a81526020019081526020016000206040518061010001604052908160008201548152602001600182018054610d84906121d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610db0906121d1565b8015610dfd5780601f10610dd257610100808354040283529160200191610dfd565b820191906000526020600020905b815481529060010190602001808311610de057829003601f168201915b50505050508152602001600282018054610e16906121d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610e42906121d1565b8015610e8f5780601f10610e6457610100808354040283529160200191610e8f565b820191906000526020600020905b815481529060010190602001808311610e7257829003601f168201915b505050918352505060038201546020808301919091526004830154604080840191909152600584015460ff16151560608085019190915260068501546080808601919091526007909501546001600160a01b031660a094850152918501519085015191850151938501519285015160c086015160e090960151919f929e50939c50919a5091985091965090945092505050565b610aaa33838361163d565b610f3561119e565b600082815260076020526040902060030154151580610f64575060008281526007602052604090206004015415155b610fb05760405162461bcd60e51b815260206004820152601d60248201527f49504d6f64656c3a2047726f757020646f6573206e6f7420657869737400000060448201526064016103f3565b600091825260076020526040909120600501805460ff1916911515919091179055565b610fdb61119e565b6001600160a01b0382166110315760405162461bcd60e51b815260206004820152601f60248201527f49504d6f64656c3a20496e76616c6964206d696e74657220616464726573730060448201526064016103f3565b6001600160a01b038216600081815260086020908152604091829020805460ff191685151590811790915591519182527f9041c22ed79d1c19c69cc22fd9e38c93da4f2dd8cd32580594e232a8a18541cb910160405180910390a25050565b6001600160a01b0385163314806110ac57506110ac8533610312565b6110c85760405162461bcd60e51b81526004016103f39061241b565b61094c8585858585611715565b6110dd61119e565b6001600160a01b0381166111425760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103f3565b61114b816115eb565b50565b60006001600160e01b03198216636cdb3d1360e11b148061117f57506001600160e01b031982166303a24d0760e21b145b8061041f57506301ffc9a760e01b6001600160e01b031983161461041f565b6003546001600160a01b03163314610b4e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f3565b60608160000361121f5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156112495780611233816121b8565b91506112429050600a83612496565b9150611223565b60008167ffffffffffffffff81111561126457611264611b20565b6040519080825280601f01601f19166020018201604052801561128e576020820181803683370190505b5090505b84156112f9576112a36001836124aa565b91506112b0600a866124bd565b6112bb906030612408565b60f81b8183815181106112d0576112d061246a565b60200101906001600160f81b031916908160001a9053506112f2600a86612496565b9450611292565b949350505050565b6001600160a01b0384166113615760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016103f3565b33600061136d8561183f565b9050600061137a8561183f565b90506000868152602081815260408083206001600160a01b038b168452909152812080548792906113ac908490612408565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461140c8360008989898961188a565b50505050505050565b81518351146114775760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016103f3565b6001600160a01b03841661149d5760405162461bcd60e51b81526004016103f3906124d1565b3360005b845181101561157d5760008582815181106114be576114be61246a565b6020026020010151905060008583815181106114dc576114dc61246a565b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561152c5760405162461bcd60e51b81526004016103f390612516565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611569908490612408565b9091555050600190930192506114a1915050565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516115cd929190612560565b60405180910390a46115e38187878787876119e5565b505050505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036116b05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016103f3565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191016108fa565b6001600160a01b03841661173b5760405162461bcd60e51b81526004016103f3906124d1565b3360006117478561183f565b905060006117548561183f565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156117975760405162461bcd60e51b81526004016103f390612516565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906117d4908490612408565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611834848a8a8a8a8a61188a565b505050505050505050565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106118795761187961246a565b602090810291909101015292915050565b6001600160a01b0384163b156115e35760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906118ce908990899088908890889060040161258e565b6020604051808303816000875af1925050508015611909575060408051601f3d908101601f19168201909252611906918101906125c8565b60015b6119b5576119156125e5565b806308c379a00361194e5750611929612601565b806119345750611950565b8060405162461bcd60e51b81526004016103f39190611cc8565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016103f3565b6001600160e01b0319811663f23a6e6160e01b1461140c5760405162461bcd60e51b81526004016103f39061268b565b6001600160a01b0384163b156115e35760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611a2990899089908890889088906004016126d3565b6020604051808303816000875af1925050508015611a64575060408051601f3d908101601f19168201909252611a61918101906125c8565b60015b611a70576119156125e5565b6001600160e01b0319811663bc197c8160e01b1461140c5760405162461bcd60e51b81526004016103f39061268b565b80356001600160a01b0381168114611ab757600080fd5b919050565b60008060408385031215611acf57600080fd5b611ad883611aa0565b946020939093013593505050565b6001600160e01b03198116811461114b57600080fd5b600060208284031215611b0e57600080fd5b8135611b1981611ae6565b9392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715611b5c57611b5c611b20565b6040525050565b600082601f830112611b7457600080fd5b813567ffffffffffffffff811115611b8e57611b8e611b20565b604051611ba5601f8301601f191660200182611b36565b818152846020838601011115611bba57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611bef57600080fd5b853567ffffffffffffffff80821115611c0757600080fd5b611c1389838a01611b63565b96506020880135915080821115611c2957600080fd5b50611c3688828901611b63565b9450506040860135925060608601359150611c5360808701611aa0565b90509295509295909350565b600060208284031215611c7157600080fd5b5035919050565b60005b83811015611c93578181015183820152602001611c7b565b50506000910152565b60008151808452611cb4816020860160208601611c78565b601f01601f19169290920160200192915050565b602081526000611b196020830184611c9c565b600080600060608486031215611cf057600080fd5b611cf984611aa0565b95602085013595506040909401359392505050565b600067ffffffffffffffff821115611d2857611d28611b20565b5060051b60200190565b600082601f830112611d4357600080fd5b81356020611d5082611d0e565b604051611d5d8282611b36565b80915083815260208101915060208460051b870101935086841115611d8157600080fd5b602086015b84811015611d9d5780358352918301918301611d86565b509695505050505050565b600080600080600060a08688031215611dc057600080fd5b611dc986611aa0565b9450611dd760208701611aa0565b9350604086013567ffffffffffffffff80821115611df457600080fd5b611e0089838a01611d32565b94506060880135915080821115611e1657600080fd5b611e2289838a01611d32565b93506080880135915080821115611e3857600080fd5b50611e4588828901611b63565b9150509295509295909350565b60008060408385031215611e6557600080fd5b823567ffffffffffffffff80821115611e7d57600080fd5b818501915085601f830112611e9157600080fd5b81356020611e9e82611d0e565b604051611eab8282611b36565b83815260059390931b8501820192828101915089841115611ecb57600080fd5b948201945b83861015611ef057611ee186611aa0565b82529482019490820190611ed0565b96505086013592505080821115611f0657600080fd5b50611f1385828601611d32565b9150509250929050565b60008151808452602080850194506020840160005b83811015611f4e57815187529582019590820190600101611f32565b509495945050505050565b602081526000611b196020830184611f1d565b600060208284031215611f7e57600080fd5b813567ffffffffffffffff811115611f9557600080fd5b6112f984828501611b63565b60006101008a8352806020840152611fbb8184018b611c9c565b90508281036040840152611fcf818a611c9c565b60608401989098525050608081019490945291151560a084015260c08301526001600160a01b031660e0909101529392505050565b60008060006060848603121561201957600080fd5b833592506020840135915061203060408501611aa0565b90509250925092565b60e08152600061204c60e083018a611c9c565b828103602084015261205e818a611c9c565b604084019890985250506060810194909452911515608084015260a08301526001600160a01b031660c09091015292915050565b80358015158114611ab757600080fd5b600080604083850312156120b557600080fd5b6120be83611aa0565b91506120cc60208401612092565b90509250929050565b6000602082840312156120e757600080fd5b611b1982611aa0565b6000806040838503121561210357600080fd5b61210c83611aa0565b91506120cc60208401611aa0565b6000806040838503121561212d57600080fd5b823591506120cc60208401612092565b600080600080600060a0868803121561215557600080fd5b61215e86611aa0565b945061216c60208701611aa0565b93506040860135925060608601359150608086013567ffffffffffffffff81111561219657600080fd5b611e4588828901611b63565b634e487b7160e01b600052601160045260246000fd5b6000600182016121ca576121ca6121a2565b5060010190565b600181811c908216806121e557607f821691505b60208210810361220557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115612253576000816000526020600020601f850160051c810160208610156122345750805b601f850160051c820191505b818110156115e357828155600101612240565b505050565b815167ffffffffffffffff81111561227257612272611b20565b6122868161228084546121d1565b8461220b565b602080601f8311600181146122bb57600084156122a35750858301515b600019600386901b1c1916600185901b1785556115e3565b600085815260208120601f198616915b828110156122ea578886015182559484019460019091019084016122cb565b50858210156123085787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60408152600061232b6040830185611c9c565b90508260208301529392505050565b6000815161234c818560208601611c78565b9290920192915050565b6000808554612364816121d1565b6001828116801561237c5760018114612391576123c0565b60ff19841687528215158302870194506123c0565b8960005260208060002060005b858110156123b75781548a82015290840190820161239e565b50505082870194505b50505050602f60f81b815284516123de816001840160208901611c78565b6123fd6123f7600183850101602f60f81b815260010190565b8661233a565b979650505050505050565b8082018082111561041f5761041f6121a2565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6000826124a5576124a5612480565b500490565b8181038181111561041f5761041f6121a2565b6000826124cc576124cc612480565b500690565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006125736040830185611f1d565b82810360208401526125858185611f1d565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906123fd90830184611c9c565b6000602082840312156125da57600080fd5b8151611b1981611ae6565b600060033d11156125fe5760046000803e5060005160e01c5b90565b600060443d101561260f5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561263f57505050505090565b82850191508151818111156126575750505050505090565b843d87010160208285010111156126715750505050505090565b61268060208286010187611b36565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906126ff90830186611f1d565b82810360608401526127118186611f1d565b905082810360808401526127258185611c9c565b9897505050505050505056fea26469706673582212204b33695b941d5ebc8ae1eb2ad4dd17138eae24aeec43907e8b83df86b3e1b88564736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014c5760003560e01c8063715018a6116100c3578063aa2fe91b1161007c578063aa2fe91b146102e1578063e985e9c514610304578063e9afbcaa14610340578063ed58bad814610353578063f242432a14610366578063f2fde38b1461037957600080fd5b8063715018a61461024b57806388aea1ba146102535780638da5cb5b1461027a57806394d6882c1461029557806399d4360f146102a8578063a22cb465146102ce57600080fd5b8063156e29f611610115578063156e29f6146101d55780632eb2c2d6146101ea5780634093d7a1146101fd5780634e1273f41461021057806355f804b3146102305780636c0360eb1461024357600080fd5b8062fdd58e1461015157806301ffc9a714610177578063023daf3f1461019a57806306545a93146101ad5780630e89341c146101b5575b600080fd5b61016461015f366004611abc565b61038c565b6040519081526020015b60405180910390f35b61018a610185366004611afc565b610425565b604051901515815260200161016e565b6101646101a8366004611bd7565b610430565b600554610164565b6101c86101c3366004611c5f565b6105ae565b60405161016e9190611cc8565b6101e86101e3366004611cdb565b6106af565b005b6101e86101f8366004611da8565b610907565b61016461020b366004611c5f565b610953565b61022361021e366004611e52565b610974565b60405161016e9190611f59565b6101e861023e366004611f6c565b610a96565b6101c8610aae565b6101e8610b3c565b610266610261366004611c5f565b610b50565b60405161016e989796959493929190611fa1565b6003546040516001600160a01b03909116815260200161016e565b6101e86102a3366004612004565b610cae565b6102bb6102b6366004611c5f565b610d3f565b60405161016e9796959493929190612039565b6101e86102dc3660046120a2565b610f22565b61018a6102ef3660046120d5565b60086020526000908152604090205460ff1681565b61018a6103123660046120f0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101e861034e36600461211a565b610f2d565b6101e86103613660046120a2565b610fd3565b6101e861037436600461213d565b611090565b6101e86103873660046120d5565b6110d5565b60006001600160a01b0383166103fc5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b600061041f8261114e565b600061043a61119e565b60048054908190600061044c836121b8565b9091555050604080516101008101825282815260208082018a81528284018a905260608301899052600060808401819052600160a0850181905260c085018a90526001600160a01b03891660e0860152868252600790935293909320825181559251919291908201906104bf9082612258565b50604082015160028201906104d49082612258565b50606082015160038201556080820151600482015560a08201516005808301805460ff19169215159290921790915560c0830151600683015560e090920151600790910180546001600160a01b0319166001600160a01b0390921691909117905580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00181905560405181907fad96ee039a6b79065f1253caad335f597fa804a70b4761bf46f0554eec68c1c79061059c908a908990612318565b60405180910390a29695505050505050565b60008181526007602052604090206005015460609060ff16806105e1575060008281526007602052604090206004015415155b6106395760405162461bcd60e51b815260206004820152602360248201527f49504d6f64656c3a20546f6b656e2067726f757020646f6573206e6f742065786044820152621a5cdd60ea1b60648201526084016103f3565b60068054610646906121d1565b905060000361066357505060408051602081019091526000815290565b600082815260076020526040902054600661067d826111f8565b610686856111f8565b60405160200161069893929190612356565b604051602081830303815290604052915050919050565b336106c26003546001600160a01b031690565b6001600160a01b031614806106e657503360009081526008602052604090205460ff165b6107325760405162461bcd60e51b815260206004820152601f60248201527f49504d6f64656c3a204e6f7420617574686f72697a656420746f206d696e740060448201526064016103f3565b60008281526007602052604090206005015460ff166107935760405162461bcd60e51b815260206004820152601c60248201527f49504d6f64656c3a2047726f7570206973206e6f74206163746976650000000060448201526064016103f3565b600081116107f25760405162461bcd60e51b815260206004820152602660248201527f49504d6f64656c3a20416d6f756e74206d75737420626520677265617465722060448201526507468616e20360d41b60648201526084016103f3565b6000828152600760205260409020600301541561087b576000828152600760205260409020600381015460049091015461082d908390612408565b111561087b5760405162461bcd60e51b815260206004820152601f60248201527f49504d6f64656c3a2045786365656473206d6178696d756d20737570706c790060448201526064016103f3565b6000828152600760205260408120600401805483929061089c908490612408565b925050819055506108be83838360405180602001604052806000815250611301565b826001600160a01b0316827f5c8e94c72da12a6d6a1213edafd788896df5fd2d6527a9adeb11f8e5d0be1c4c836040516108fa91815260200190565b60405180910390a3505050565b6001600160a01b03851633148061092357506109238533610312565b61093f5760405162461bcd60e51b81526004016103f39061241b565b61094c8585858585611415565b5050505050565b6005818154811061096357600080fd5b600091825260209091200154905081565b606081518351146109d95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016103f3565b6000835167ffffffffffffffff8111156109f5576109f5611b20565b604051908082528060200260200182016040528015610a1e578160200160208202803683370190505b50905060005b8451811015610a8e57610a69858281518110610a4257610a4261246a565b6020026020010151858381518110610a5c57610a5c61246a565b602002602001015161038c565b828281518110610a7b57610a7b61246a565b6020908102919091010152600101610a24565b509392505050565b610a9e61119e565b6006610aaa8282612258565b5050565b60068054610abb906121d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae7906121d1565b8015610b345780601f10610b0957610100808354040283529160200191610b34565b820191906000526020600020905b815481529060010190602001808311610b1757829003601f168201915b505050505081565b610b4461119e565b610b4e60006115eb565b565b60076020526000908152604090208054600182018054919291610b72906121d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9e906121d1565b8015610beb5780601f10610bc057610100808354040283529160200191610beb565b820191906000526020600020905b815481529060010190602001808311610bce57829003601f168201915b505050505090806002018054610c00906121d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2c906121d1565b8015610c795780601f10610c4e57610100808354040283529160200191610c79565b820191906000526020600020905b815481529060010190602001808311610c5c57829003601f168201915b50505060038401546004850154600586015460068701546007909701549596929591945060ff1692506001600160a01b031688565b610cb661119e565b6000838152600760205260408120549003610d055760405162461bcd60e51b815260206004820152600f60248201526e11dc9bdd5c081b9bdd08195e1a5cdd608a1b60448201526064016103f3565b60009283526007602081905260409093206006810192909255910180546001600160a01b0319166001600160a01b03909216919091179055565b606080600080600080600080600760008a81526020019081526020016000206040518061010001604052908160008201548152602001600182018054610d84906121d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610db0906121d1565b8015610dfd5780601f10610dd257610100808354040283529160200191610dfd565b820191906000526020600020905b815481529060010190602001808311610de057829003601f168201915b50505050508152602001600282018054610e16906121d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610e42906121d1565b8015610e8f5780601f10610e6457610100808354040283529160200191610e8f565b820191906000526020600020905b815481529060010190602001808311610e7257829003601f168201915b505050918352505060038201546020808301919091526004830154604080840191909152600584015460ff16151560608085019190915260068501546080808601919091526007909501546001600160a01b031660a094850152918501519085015191850151938501519285015160c086015160e090960151919f929e50939c50919a5091985091965090945092505050565b610aaa33838361163d565b610f3561119e565b600082815260076020526040902060030154151580610f64575060008281526007602052604090206004015415155b610fb05760405162461bcd60e51b815260206004820152601d60248201527f49504d6f64656c3a2047726f757020646f6573206e6f7420657869737400000060448201526064016103f3565b600091825260076020526040909120600501805460ff1916911515919091179055565b610fdb61119e565b6001600160a01b0382166110315760405162461bcd60e51b815260206004820152601f60248201527f49504d6f64656c3a20496e76616c6964206d696e74657220616464726573730060448201526064016103f3565b6001600160a01b038216600081815260086020908152604091829020805460ff191685151590811790915591519182527f9041c22ed79d1c19c69cc22fd9e38c93da4f2dd8cd32580594e232a8a18541cb910160405180910390a25050565b6001600160a01b0385163314806110ac57506110ac8533610312565b6110c85760405162461bcd60e51b81526004016103f39061241b565b61094c8585858585611715565b6110dd61119e565b6001600160a01b0381166111425760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103f3565b61114b816115eb565b50565b60006001600160e01b03198216636cdb3d1360e11b148061117f57506001600160e01b031982166303a24d0760e21b145b8061041f57506301ffc9a760e01b6001600160e01b031983161461041f565b6003546001600160a01b03163314610b4e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f3565b60608160000361121f5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156112495780611233816121b8565b91506112429050600a83612496565b9150611223565b60008167ffffffffffffffff81111561126457611264611b20565b6040519080825280601f01601f19166020018201604052801561128e576020820181803683370190505b5090505b84156112f9576112a36001836124aa565b91506112b0600a866124bd565b6112bb906030612408565b60f81b8183815181106112d0576112d061246a565b60200101906001600160f81b031916908160001a9053506112f2600a86612496565b9450611292565b949350505050565b6001600160a01b0384166113615760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016103f3565b33600061136d8561183f565b9050600061137a8561183f565b90506000868152602081815260408083206001600160a01b038b168452909152812080548792906113ac908490612408565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461140c8360008989898961188a565b50505050505050565b81518351146114775760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016103f3565b6001600160a01b03841661149d5760405162461bcd60e51b81526004016103f3906124d1565b3360005b845181101561157d5760008582815181106114be576114be61246a565b6020026020010151905060008583815181106114dc576114dc61246a565b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561152c5760405162461bcd60e51b81526004016103f390612516565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611569908490612408565b9091555050600190930192506114a1915050565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516115cd929190612560565b60405180910390a46115e38187878787876119e5565b505050505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036116b05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016103f3565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191016108fa565b6001600160a01b03841661173b5760405162461bcd60e51b81526004016103f3906124d1565b3360006117478561183f565b905060006117548561183f565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156117975760405162461bcd60e51b81526004016103f390612516565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906117d4908490612408565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611834848a8a8a8a8a61188a565b505050505050505050565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106118795761187961246a565b602090810291909101015292915050565b6001600160a01b0384163b156115e35760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906118ce908990899088908890889060040161258e565b6020604051808303816000875af1925050508015611909575060408051601f3d908101601f19168201909252611906918101906125c8565b60015b6119b5576119156125e5565b806308c379a00361194e5750611929612601565b806119345750611950565b8060405162461bcd60e51b81526004016103f39190611cc8565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016103f3565b6001600160e01b0319811663f23a6e6160e01b1461140c5760405162461bcd60e51b81526004016103f39061268b565b6001600160a01b0384163b156115e35760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611a2990899089908890889088906004016126d3565b6020604051808303816000875af1925050508015611a64575060408051601f3d908101601f19168201909252611a61918101906125c8565b60015b611a70576119156125e5565b6001600160e01b0319811663bc197c8160e01b1461140c5760405162461bcd60e51b81526004016103f39061268b565b80356001600160a01b0381168114611ab757600080fd5b919050565b60008060408385031215611acf57600080fd5b611ad883611aa0565b946020939093013593505050565b6001600160e01b03198116811461114b57600080fd5b600060208284031215611b0e57600080fd5b8135611b1981611ae6565b9392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715611b5c57611b5c611b20565b6040525050565b600082601f830112611b7457600080fd5b813567ffffffffffffffff811115611b8e57611b8e611b20565b604051611ba5601f8301601f191660200182611b36565b818152846020838601011115611bba57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611bef57600080fd5b853567ffffffffffffffff80821115611c0757600080fd5b611c1389838a01611b63565b96506020880135915080821115611c2957600080fd5b50611c3688828901611b63565b9450506040860135925060608601359150611c5360808701611aa0565b90509295509295909350565b600060208284031215611c7157600080fd5b5035919050565b60005b83811015611c93578181015183820152602001611c7b565b50506000910152565b60008151808452611cb4816020860160208601611c78565b601f01601f19169290920160200192915050565b602081526000611b196020830184611c9c565b600080600060608486031215611cf057600080fd5b611cf984611aa0565b95602085013595506040909401359392505050565b600067ffffffffffffffff821115611d2857611d28611b20565b5060051b60200190565b600082601f830112611d4357600080fd5b81356020611d5082611d0e565b604051611d5d8282611b36565b80915083815260208101915060208460051b870101935086841115611d8157600080fd5b602086015b84811015611d9d5780358352918301918301611d86565b509695505050505050565b600080600080600060a08688031215611dc057600080fd5b611dc986611aa0565b9450611dd760208701611aa0565b9350604086013567ffffffffffffffff80821115611df457600080fd5b611e0089838a01611d32565b94506060880135915080821115611e1657600080fd5b611e2289838a01611d32565b93506080880135915080821115611e3857600080fd5b50611e4588828901611b63565b9150509295509295909350565b60008060408385031215611e6557600080fd5b823567ffffffffffffffff80821115611e7d57600080fd5b818501915085601f830112611e9157600080fd5b81356020611e9e82611d0e565b604051611eab8282611b36565b83815260059390931b8501820192828101915089841115611ecb57600080fd5b948201945b83861015611ef057611ee186611aa0565b82529482019490820190611ed0565b96505086013592505080821115611f0657600080fd5b50611f1385828601611d32565b9150509250929050565b60008151808452602080850194506020840160005b83811015611f4e57815187529582019590820190600101611f32565b509495945050505050565b602081526000611b196020830184611f1d565b600060208284031215611f7e57600080fd5b813567ffffffffffffffff811115611f9557600080fd5b6112f984828501611b63565b60006101008a8352806020840152611fbb8184018b611c9c565b90508281036040840152611fcf818a611c9c565b60608401989098525050608081019490945291151560a084015260c08301526001600160a01b031660e0909101529392505050565b60008060006060848603121561201957600080fd5b833592506020840135915061203060408501611aa0565b90509250925092565b60e08152600061204c60e083018a611c9c565b828103602084015261205e818a611c9c565b604084019890985250506060810194909452911515608084015260a08301526001600160a01b031660c09091015292915050565b80358015158114611ab757600080fd5b600080604083850312156120b557600080fd5b6120be83611aa0565b91506120cc60208401612092565b90509250929050565b6000602082840312156120e757600080fd5b611b1982611aa0565b6000806040838503121561210357600080fd5b61210c83611aa0565b91506120cc60208401611aa0565b6000806040838503121561212d57600080fd5b823591506120cc60208401612092565b600080600080600060a0868803121561215557600080fd5b61215e86611aa0565b945061216c60208701611aa0565b93506040860135925060608601359150608086013567ffffffffffffffff81111561219657600080fd5b611e4588828901611b63565b634e487b7160e01b600052601160045260246000fd5b6000600182016121ca576121ca6121a2565b5060010190565b600181811c908216806121e557607f821691505b60208210810361220557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115612253576000816000526020600020601f850160051c810160208610156122345750805b601f850160051c820191505b818110156115e357828155600101612240565b505050565b815167ffffffffffffffff81111561227257612272611b20565b6122868161228084546121d1565b8461220b565b602080601f8311600181146122bb57600084156122a35750858301515b600019600386901b1c1916600185901b1785556115e3565b600085815260208120601f198616915b828110156122ea578886015182559484019460019091019084016122cb565b50858210156123085787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60408152600061232b6040830185611c9c565b90508260208301529392505050565b6000815161234c818560208601611c78565b9290920192915050565b6000808554612364816121d1565b6001828116801561237c5760018114612391576123c0565b60ff19841687528215158302870194506123c0565b8960005260208060002060005b858110156123b75781548a82015290840190820161239e565b50505082870194505b50505050602f60f81b815284516123de816001840160208901611c78565b6123fd6123f7600183850101602f60f81b815260010190565b8661233a565b979650505050505050565b8082018082111561041f5761041f6121a2565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6000826124a5576124a5612480565b500490565b8181038181111561041f5761041f6121a2565b6000826124cc576124cc612480565b500690565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006125736040830185611f1d565b82810360208401526125858185611f1d565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906123fd90830184611c9c565b6000602082840312156125da57600080fd5b8151611b1981611ae6565b600060033d11156125fe5760046000803e5060005160e01c5b90565b600060443d101561260f5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561263f57505050505090565b82850191508151818111156126575750505050505090565b843d87010160208285010111156126715750505050505090565b61268060208286010187611b36565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906126ff90830186611f1d565b82810360608401526127118186611f1d565b905082810360808401526127258185611c9c565b9897505050505050505056fea26469706673582212204b33695b941d5ebc8ae1eb2ad4dd17138eae24aeec43907e8b83df86b3e1b88564736f6c63430008180033",
  "devdoc": {
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/IPModel.sol:IPModel",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 144,
        "contract": "contracts/IPModel.sol:IPModel",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 146,
        "contract": "contracts/IPModel.sol:IPModel",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/IPModel.sol:IPModel",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2185,
        "contract": "contracts/IPModel.sol:IPModel",
        "label": "_nextTokenId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2188,
        "contract": "contracts/IPModel.sol:IPModel",
        "label": "groupIds",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2190,
        "contract": "contracts/IPModel.sol:IPModel",
        "label": "baseURI",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 2212,
        "contract": "contracts/IPModel.sol:IPModel",
        "label": "tokenGroups",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(TokenGroup)2207_storage)"
      },
      {
        "astId": 2216,
        "contract": "contracts/IPModel.sol:IPModel",
        "label": "authorizedMinters",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(TokenGroup)2207_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPModel.TokenGroup)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenGroup)2207_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenGroup)2207_storage": {
        "encoding": "inplace",
        "label": "struct IPModel.TokenGroup",
        "members": [
          {
            "astId": 2192,
            "contract": "contracts/IPModel.sol:IPModel",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2194,
            "contract": "contracts/IPModel.sol:IPModel",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2196,
            "contract": "contracts/IPModel.sol:IPModel",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2198,
            "contract": "contracts/IPModel.sol:IPModel",
            "label": "maxSupply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2200,
            "contract": "contracts/IPModel.sol:IPModel",
            "label": "currentSupply",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2202,
            "contract": "contracts/IPModel.sol:IPModel",
            "label": "isActive",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 2204,
            "contract": "contracts/IPModel.sol:IPModel",
            "label": "price",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2206,
            "contract": "contracts/IPModel.sol:IPModel",
            "label": "payToken",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}